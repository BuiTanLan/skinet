{"version":3,"file":"src_app_account_account_module_ts.js","mappings":";;;;;;;;;;;;;;;;;AACuD;AACE;AACS;;;AAElE,MAAM,MAAM,GAAW;IACrB,EAAE,IAAI,EAAE,OAAO,EAAE,SAAS,EAAE,kEAAc,EAAE;IAC5C,EAAE,IAAI,EAAE,UAAU,EAAE,SAAS,EAAE,2EAAiB,EAAE;CACnD,CAAC;AASK,MAAM,oBAAoB;;wFAApB,oBAAoB;iHAApB,oBAAoB;qHAJ7B,kEAAqB,CAAC,MAAM,CAAC,EAErB,yDAAY;mIAEX,oBAAoB,oFAFrB,yDAAY;;;;;;;;;;;;;;;;;;;;;ACduB;AACU;AACS;AACF;AACT;;AAYhD,MAAM,aAAa;;0EAAb,aAAa;0GAAb,aAAa;8GALtB,yDAAY;QACZ,yEAAoB;QACpB,+DAAY;mIAGH,aAAa,mBAPT,kEAAc,EAAE,2EAAiB,aAE9C,yDAAY;QACZ,yEAAoB;QACpB,+DAAY;;;;;;;;;;;;;;;;;;;;ACbkE;;;;;;AAS3E,MAAM,cAAc;IAIzB,YACmB,cAA8B,EAC9B,MAAc,EACd,cAA8B;QAF9B,mBAAc,GAAd,cAAc,CAAgB;QAC9B,WAAM,GAAN,MAAM,CAAQ;QACd,mBAAc,GAAd,cAAc,CAAgB;IAAI,CAAC;IAEtD,QAAQ;QACN,IAAI,CAAC,SAAS,GAAG,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,WAAW,CAAC,WAAW,CAAC,IAAI,OAAO,CAAC;QAClF,IAAI,CAAC,eAAe,EAAE,CAAC;IACzB,CAAC;IACD,eAAe;QACb,IAAI,CAAC,SAAS,GAAG,IAAI,4DAAgB,CAAC;YACpC,KAAK,EAAE,IAAI,8DAAkB,CAAC,EAAE,EAAE,CAAC,+DAAmB,EAAE,8DAAkB,CAAC,oCAAoC,CAAC,CAAC,CAAC;YAClH,QAAQ,EAAE,IAAI,8DAAkB,CAAC,EAAE,EAAE,+DAAmB,CAAC;SAC1D,CAAC,CAAC;IACL,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,KAAK,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;YACxD,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,IAAI,CAAC,SAAS,CAAC;YAC1D,KAAK,EAAE,KAAK,CAAC,EAAE,CAAC,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC;SACnC,CAAC,CAAC;IACL,CAAC;;4EAxBU,cAAc;4GAAd,cAAc;QCV3B,yEAAgD;QAEd,0IAAY,cAAU,IAAC;QACnD,yEAA8B;QACW,gEAAK;QAAA,4DAAK;QAGnD,+EAAmF;QAGnF,4EAA8F;QAAA,kEAAO;QAAA,4DAAS;;QAR1G,0DAAuB;QAAvB,oFAAuB;QAKa,0DAAyB;QAAzB,kFAAyB;QACtB,0DAAoB;QAApB,6EAAoB;QAEvD,0DAA8B;QAA9B,2FAA8B;;;;;;;;;;;;;;;;;;;;;;;;;;ACTwD;AAEnE;AACe;;;;;;;;ICMxC,qEAAiC;IAAA,uDAAS;IAAA,4DAAK;;;IAAd,0DAAS;IAAT,yEAAS;;;IAD5C,yEAAsD;IACpD,iHAA+C;IACjD,4DAAK;;;IADmB,0DAAS;IAAT,kFAAS;;ADEhC,MAAM,iBAAiB;IAG5B,YAA6B,EAAsB,EAAU,cAA8B,EAAmB,MAAc;QAA/F,OAAE,GAAF,EAAE,CAAoB;QAAU,mBAAc,GAAd,cAAc,CAAgB;QAAmB,WAAM,GAAN,MAAM,CAAQ;IAAI,CAAC;IAEjI,QAAQ;QACN,IAAI,CAAC,kBAAkB,EAAE,CAAC;IAC5B,CAAC;IACD,kBAAkB;QAChB,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC,EAAE,CAAC,KAAK,CAAC;YAChC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC,+DAAmB,CAAC,CAAC;YAC1C,KAAK,EAAE;gBACL,IAAI;gBACJ;oBACE,+DAAmB;oBACnB,8DAAkB,CAAC,uCAAuC,CAAC;iBAC5D;gBACD,CAAC,IAAI,CAAC,qBAAqB,EAAE,CAAC;aAC/B;YACD,QAAQ,EAAE,CAAC,IAAI,EAAE,CAAC,+DAAmB,CAAC,CAAC;SACxC,CAAC,CAAC;IACL,CAAC;IACD,QAAQ;QACN,IAAI,CAAC,cAAc,CAAC,QAAQ,CAAC,IAAI,CAAC,YAAY,CAAC,KAAK,CAAC,CAAC,SAAS,CAAC;YAC9D,IAAI,EAAE,GAAG,EAAE,CAAC,KAAK,IAAI,CAAC,MAAM,CAAC,aAAa,CAAC,OAAO,CAAC;YACnD,KAAK,EAAE,KAAK,CAAC,EAAE;gBACb,OAAO,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC;gBACnB,IAAI,CAAC,MAAM,GAAG,KAAK,CAAC,MAAM,CAAC;YAC7B,CAAC;SACF,CAAC,CAAC;IACL,CAAC;IACD,qBAAqB;QACnB,OAAO,OAAO,CAAC,EAAE;YACf,OAAO,2CAAK,CAAC,GAAG,CAAC,CAAC,IAAI,CACpB,yDAAS,CAAC,GAAG,EAAE;gBACb,IAAI,CAAC,OAAO,CAAC,KAAK,EAAE;oBAClB,OAAO,wCAAE,CAAC,IAAI,CAAC,CAAC;iBACjB;gBACD,OAAO,IAAI,CAAC,cAAc,CAAC,gBAAgB,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,IAAI,CAC7D,mDAAG,CAAC,GAAG,CAAC,EAAE;oBACR,OAAO,GAAG,CAAC,CAAC,CAAC,EAAE,WAAW,EAAE,IAAI,EAAE,CAAC,CAAC,CAAC,IAAI,CAAC;gBAC5C,CAAC,CAAC,CACH,CAAC;YACJ,CAAC,CAAC,CACH,CAAC;QACJ,CAAC,CAAC;IACJ,CAAC;;kFA9CU,iBAAiB;+GAAjB,iBAAiB;QCZ9B,yEAAgD;QAEX,6IAAY,cAAU,IAAC;QACtD,yEAA8B;QACW,mEAAQ;QAAA,4DAAK;QAEtD,+EAAwF;QAGxF,2GAEK;QACL,6EAAiG;QAAA,oEAAQ;QAAA,4DAAS;;QAV9G,0DAA0B;QAA1B,uFAA0B;QAIgB,0DAAwB;QAAxB,iFAAwB;QAC9B,0DAAyB;QAAzB,kFAAyB;QACtB,0DAAoB;QAApB,6EAAoB;QACvB,0DAAY;QAAZ,4EAAY;QAG5C,0DAAiC;QAAjC,8FAAiC","sources":["./src/app/account/account-routing.module.ts","./src/app/account/account.module.ts","./src/app/account/login/login.component.ts","./src/app/account/login/login.component.html","./src/app/account/register/register.component.ts","./src/app/account/register/register.component.html"],"sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { RouterModule, Routes } from '@angular/router';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\n\r\nconst routes: Routes = [\r\n  { path: 'login', component: LoginComponent },\r\n  { path: 'register', component: RegisterComponent }\r\n];\r\n\r\n@NgModule({\r\n  declarations: [],\r\n  imports: [\r\n    RouterModule.forChild(routes)\r\n  ],\r\n  exports: [RouterModule]\r\n})\r\nexport class AccountRoutingModule { }\r\n","import { NgModule } from '@angular/core';\r\nimport { CommonModule } from '@angular/common';\r\nimport { LoginComponent } from './login/login.component';\r\nimport { RegisterComponent } from './register/register.component';\r\nimport { AccountRoutingModule } from './account-routing.module';\r\nimport { SharedModule } from '../shared/shared.module';\r\n\r\n\r\n\r\n@NgModule({\r\n  declarations: [LoginComponent, RegisterComponent],\r\n  imports: [\r\n    CommonModule,\r\n    AccountRoutingModule,\r\n    SharedModule\r\n  ]\r\n})\r\nexport class AccountModule { }\r\n","import { Component, OnInit } from '@angular/core';\r\nimport { UntypedFormControl, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { ActivatedRoute, Router } from '@angular/router';\r\nimport { AccountService } from '../account.service';\r\n\r\n@Component({\r\n  selector: 'app-login',\r\n  templateUrl: './login.component.html',\r\n  styleUrls: ['./login.component.scss']\r\n})\r\nexport class LoginComponent implements OnInit {\r\n  loginForm!: UntypedFormGroup;\r\n  returnUrl!: string;\r\n\r\n  constructor(\r\n    private readonly accountService: AccountService,\r\n    private readonly router: Router,\r\n    private readonly activatedRoute: ActivatedRoute) { }\r\n\r\n  ngOnInit() {\r\n    this.returnUrl = this.activatedRoute.snapshot.queryParams['returnUrl'] || '/shop';\r\n    this.createLoginForm();\r\n  }\r\n  createLoginForm() {\r\n    this.loginForm = new UntypedFormGroup({\r\n      email: new UntypedFormControl('', [Validators.required, Validators.pattern('^\\\\w+@[a-zA-Z_]+?\\\\.[a-zA-Z]{2,3}$')]),\r\n      password: new UntypedFormControl('', Validators.required)\r\n    });\r\n  }\r\n  onSubmit() {\r\n    this.accountService.login(this.loginForm.value).subscribe({\r\n      next: () => void this.router.navigateByUrl(this.returnUrl),\r\n      error: error => console.log(error)\r\n    });\r\n  }\r\n}\r\n","<div class=\"d-flex justify-content-center mt-5\">\r\n  <div class=\"col-3\">\r\n    <form [formGroup]=\"loginForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"text-center mb-4\">\r\n        <h1 class=\"h3 mb-3 font-weight-normal\">Login</h1>\r\n      </div>\r\n\r\n      <app-text-input formControlName=\"email\" [label]=\"'Email Address'\"></app-text-input>\r\n      <app-text-input formControlName=\"password\" [label]=\"'Password'\" [type]=\"'password'\"></app-text-input>\r\n\r\n      <button [disabled]=\"loginForm.invalid\" class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Sign in</button>\r\n    </form>\r\n  </div>\r\n  <!-- <div class=\"col-4\">\r\n    <p>FormStatus: {{loginForm.status}}</p>\r\n    <p>Email Status: {{loginForm.get('email').status}}</p>\r\n    <p>Email Touch: {{loginForm.get('email').touched}}</p>\r\n    <p>Email Dirty: {{loginForm.get('email').dirty}}</p>\r\n    <pre>{{loginForm.value | json}}</pre>\r\n  </div> -->\r\n</div>","import { Component, OnInit } from '@angular/core';\r\nimport { AsyncValidatorFn, UntypedFormBuilder, UntypedFormGroup, Validators } from '@angular/forms';\r\nimport { Router } from '@angular/router';\r\nimport { of, timer } from 'rxjs';\r\nimport { map, switchMap } from 'rxjs/operators';\r\nimport { AccountService } from '../account.service';\r\n\r\n@Component({\r\n  selector: 'app-register',\r\n  templateUrl: './register.component.html',\r\n  styleUrls: ['./register.component.scss']\r\n})\r\nexport class RegisterComponent implements OnInit {\r\n  registerForm!: UntypedFormGroup;\r\n  errors!: string;\r\n  constructor(private readonly fb: UntypedFormBuilder, private accountService: AccountService, private readonly router: Router) { }\r\n\r\n  ngOnInit(): void {\r\n    this.createRegisterForm();\r\n  }\r\n  createRegisterForm() {\r\n    this.registerForm = this.fb.group({\r\n      displayName: [null, [Validators.required]],\r\n      email: [\r\n        null,\r\n        [\r\n          Validators.required,\r\n          Validators.pattern('^[\\\\w-\\\\.]+@([\\\\w-]+\\\\.)+[\\\\w-]{2,4}$'),\r\n        ],\r\n        [this.validateEmailNotToken()],\r\n      ],\r\n      password: [null, [Validators.required]],\r\n    });\r\n  }\r\n  onSubmit() {\r\n    this.accountService.register(this.registerForm.value).subscribe({\r\n      next: () => void this.router.navigateByUrl('/shop'),\r\n      error: error => {\r\n        console.log(error);\r\n        this.errors = error.errors;\r\n      }\r\n    });\r\n  }\r\n  validateEmailNotToken(): AsyncValidatorFn {\r\n    return control => {\r\n      return timer(500).pipe(\r\n        switchMap(() => {\r\n          if (!control.value) {\r\n            return of(null);\r\n          }\r\n          return this.accountService.checkEmailExists(control.value).pipe(\r\n            map(res => {\r\n              return res ? { emailExists: true } : null;\r\n            })\r\n          );\r\n        })\r\n      );\r\n    };\r\n  }\r\n}\r\n","<div class=\"d-flex justify-content-center mt-5\">\r\n  <div class=\"col-3\">\r\n    <form [formGroup]=\"registerForm\" (ngSubmit)=\"onSubmit()\">\r\n      <div class=\"text-center mb-4\">\r\n        <h1 class=\"h3 mb-3 font-weight-normal\">Register</h1>\r\n      </div>\r\n      <app-text-input formControlName=\"displayName\" [label]=\"'Display Name'\"></app-text-input>\r\n      <app-text-input formControlName=\"email\" [label]=\"'Email Address'\"></app-text-input>\r\n      <app-text-input formControlName=\"password\" [label]=\"'Password'\" [type]=\"'password'\"></app-text-input>\r\n      <ul class=\"text-danger list-unstyled\"  *ngIf=\"errors\">\r\n        <li *ngFor=\"let error of errors\">{{error}}</li>\r\n      </ul>\r\n      <button [disabled]=\"registerForm.invalid\" class=\"btn btn-lg btn-primary btn-block\" type=\"submit\">Register</button>\r\n    </form>\r\n  </div>\r\n  \r\n</div>"],"names":[],"sourceRoot":"webpack:///"}